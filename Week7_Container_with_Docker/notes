#Containers live in container repo(private like AWS ECR or public like dockerhub)
#How containers improved App Dev process- 
App is own isolated env, app is packed with complete config and & one command to install app & you can run 2 different app containers.

#How containers improved App Deployment process
Dev and Ops work together better and No env config needed on server, only the container tech runtime.

#Docker images arch
alpine linux base image ->

#Linux supports docker natively while MAC and windows , user docker desktop

#Run docker image like postgre(no login necessary for docker.com)
Go to docker hub, seacrh for image select version
inside the folder with -e(means env variable)

#docker run -e POSTGRES_PASSWORD=mypassword postgres:13.10(command can also be found on docker hub site)
the docker run also starts the app
the layers are rep by the hashes during the download

#docker ps (shows running docker container)
image is downloaded artefact,while container is started container image.

#install docker on ubuntu

#env variable for mysql
DB_USER
DB_PWD
DB_SERVER
DB_NAME

#create mysql container virtual network
sudo docker network create mysql-network

#start mysql with needed env variable
docker run -d \
-p 3306:3306 \
-e DB_USER=admin \
-e DB_PWD=password \
-e DB_SERVER=mysql \
-e DB_NAME=mysql \
-e MYSQL_ROOT_PASSWORD=password \
--net mysql-network \ 
--name mysql8
mysql:8.0

docker rm <container_name>

#export env variables needed for the application
export DB_USER=admin
export DB_PWD=password
export DB_SERVER=mysql
export DB_NAME=mysql

gradle build

java -jar <>.jar

#start phpmyadmin container using official image
docker run --name phpmyadmin -d --link mysql8:db --net mysql-network -p 8084:80 phpmyadmin

-----------
dockerfile (building docker image))

first line of dockerfile
Dockerfile is always save with the D capitalized 
using node as example
#every image is based on docker hub is based on another base image
FROM node:20-alpine #to pull the specific image of node

ENV MONGO_DB_USERNAME=admin \ #environmental variables
    MONGO_DB_PWD=password

RUN mkdir -p /home/app #making a directory inside the container fs, RUN always run command inside the container.

COPY . /home/app #copy from the host directory to the container fs directory

WORKDIR /home/app #the default working directory inside the container where all commands run from automatically

RUN npm install #to create the container specific node modules inside the container when building the image

CMD ["node","server.js"]

whenever we adjust the Dockerfile, you must rebuild the image
#to create the app image
docker build -t my-app:1.0

#to run the fs of the container
docker exec -it container_id /bin/sh

--------------
to push to a private repo, 
1. you have to login to the private repo using the auth literal provided by the private repo ,in this case AWS
aws ecr get-login-password --region eu-centrl-1 | docker login --username AWS --password-stdin XXXXXX.dkr.ec


you also need to have awscli as well
 
-------------------

create docker volume for mysql

To install docker on linux Mint
https://linuxiac.com/how-to-install-docker-on-linux-
/

----------
create Dockerfile inside docker-exercises folder sub folder called java-sql-app
copy jar file into java-sql-app folder 
