#Containers live in container repo(private like AWS ECR or public like dockerhub)
#How containers improved App Dev process- 
App is own isolated env, app is packed with complete config and & one command to install app & you can run 2 different app containers.

#How containers improved App Deployment process
Dev and Ops work together better and No env config needed on server, only the container tech runtime.

#Docker images arch
alpine linux base image ->

#Linux supports docker natively while MAC and windows , user docker desktop

#Run docker image like postgre(no login necessary for docker.com)
Go to docker hub, seacrh for image select version
inside the folder with -e(means env variable)

#docker run -e POSTGRES_PASSWORD=mypassword postgres:13.10(command can also be found on docker hub site)
the docker run also starts the app
the layers are rep by the hashes during the download

#docker ps (shows running docker container)
image is downloaded artefact,while container is started container image.

#install docker on ubuntu

#env variable for mysql
DB_USER
DB_PWD
DB_SERVER
DB_NAME

#create mysql container virtual network
sudo docker network create mysql-network

#start mysql with needed env variable
docker run -d \
-p 3306:3306 \
-e DB_USER=admin \
-e DB_PWD=password \
-e DB_SERVER=mysql \
-e DB_NAME=mysql \
-e MYSQL_ROOT_PASSWORD=password \
--net mysql-network \ 
--name mysql8
mysql:8.0

docker rm <container_name>

#export env variables needed for the application
export DB_USER=admin
export DB_PWD=password
export DB_SERVER=mysql
export DB_NAME=mysql

gradle build

java -jar <>.jar

