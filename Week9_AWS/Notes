<<<<<<< HEAD
#
line 1- AKIAZEV3XFR2GPWUHUFY
line 2- 1S9jWuAmlnz2oW8Pbj2Xl0Mw8Li555tqIAlIQxnF


AWS-Commands.md
aws ec2 run-instances
    --image-id ami-xxxxxx
    --count 1
    --instance-type t2.micro
    --key-name MyKpCli
    --security-group-ids sg-xxxxx
    --subnet-id subnet-xxx


#Had to add a .env file in the same tree as the docker-compose.yaml file to load the environmental variable for the image tag.

=======
emmy1:
AKIAZEV3XFR2GPWUHUFY
1S9jWuAmlnz2oW8Pbj2Xl0Mw8Li555tqIAlIQxnF
>>>>>>> fcafb350c5ea10177b9071fd169fadb669233170

#With docker compose and server shell script
#!/usr/bin/env groovy

library identifier: 'jenkins-shared-library@main', retriever: modernSCM(
    [$class: 'GitSCMSource',
    remote: 'https://gitlab.com/exceloracle1/week-9-aws/jenkins-shared-library.git',
    credentialsId: 'gitlab_token'
    ]
)

pipeline {
    agent any
    tools {
        maven 'maven-3'
    }
    environment {
        IMAGE_NAME = 'excelltest/demo-java-maven-app:1.1.10-30'
    }
    stages {
        stage('build app') {
            steps {
                echo 'building application jar...'
                buildJar()
            }
        }
        stage('build image') {
            steps {
                script {
                    echo 'building the docker image...'
                    buildImage(env.IMAGE_NAME)
                    dockerLogin()
                    dockerPush(env.IMAGE_NAME)
                }
            }
        } 
        stage("deploy") {
            steps {
                script {
                    echo 'deploying docker image to EC2...'
                    def remoteHost = "16.16.201.115"
                    def remoteUser = "ec2-user"
                    def remotePath = "/home/ec2-user"
                    def shellCmd = "bash ./server-cmds.sh ${env.IMAGE_NAME}" 
                    //def dockerComposeCmd = "docker-compose -f docker-compose.yaml up --detach"
                    sshagent(['ec2-server-key']) {
                        sh "ssh-keyscan -H ${remoteHost} >> ~/.ssh/known_hosts"
                        sh "scp server-cmds.sh ${remoteUser}@${remoteHost}:${remotePath} "
                        sh "scp docker-compose.yaml ${remoteUser}@${remoteHost}:${remotePath}"
                        sh "ssh ${remoteUser}@${remoteHost} '${shellCmd}'"
                    }
                }
            }               
        }
    }
}



#With docker compose from jenkins-jobs branch
#!/usr/bin/env groovy

library identifier: 'jenkins-shared-library@main', retriever: modernSCM(
    [$class: 'GitSCMSource',
    remote: 'https://gitlab.com/exceloracle1/week-9-aws/jenkins-shared-library.git',
    credentialsId: 'gitlab_token'
    ]
)

pipeline {
    agent any
    tools {
        maven 'maven-3'
    }
    environment {
        IMAGE_NAME = 'excelltest/demo-java-maven-app:1.1.10-30'
    }
    stages {
        stage('build app') {
            steps {
                echo 'building application jar...'
                buildJar()
            }
        }
        stage('build image') {
            steps {
                script {
                    echo 'building the docker image...'
                    buildImage(env.IMAGE_NAME)
                    dockerLogin()
                    dockerPush(env.IMAGE_NAME)
                }
            }
        } 
        stage("deploy") {
            steps {
                script {
                    echo 'deploying docker image to EC2...'
                    def remoteHost = "16.16.201.115"
                    def remoteUser = "ec2-user"
                    def remotePath = "/home/ec2-user"
                    def dockerComposeCmd = "docker-compose -f docker-compose.yaml up --detach"
                    sshagent(['ec2-server-key']) {
                        sh "ssh-keyscan -H ${remoteHost} >> ~/.ssh/known_hosts"
                        sh "scp docker-compose.yaml ${remoteUser}@${remoteHost}:${remotePath}"
                        sh "ssh ${remoteUser}@${remoteHost} '${dockerComposeCmd}'"
                    }
                }
            }               
        }
    }
}



#Had to execute below to resolve docker access to socks file for pipeline
chmod 666 /var/run/docker.sock (Inside the jenkins container as root)



#Jenkinsfile content on the jenkins-jobs branch(Deploy on the Java maven application)
#!/usr/bin/env groovy

library identifier: 'jenkins-shared-library@main', retriever: modernSCM(
    [$class: 'GitSCMSource',
    remote: 'https://gitlab.com/exceloracle1/week-9-aws/jenkins-shared-library.git',
    credentialsId: 'gitlab_token'
    ]
)

pipeline {
    agent any
    tools {
        maven 'maven-3'
    }
    environment {
        IMAGE_NAME = 'excelltest/demo-java-maven-app:1.1.10-30'
    }
    stages {
        stage('build app') {
            steps {
                echo 'building application jar...'
                buildJar()
            }
        }
        stage('build image') {
            steps {
                script {
                    echo 'building the docker image...'
                    buildImage(env.IMAGE_NAME)
                    dockerLogin()
                    dockerPush(env.IMAGE_NAME)
                }
            }
        } 
        stage("deploy") {
            steps {
                script {
                    echo 'deploying docker image to EC2...'
                    def dockerCmd = "docker run -p 8080:8080 -d ${IMAGE_NAME}"
                    sshagent(['ec2-server-key']) {
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@16.170.157.188 ${dockerCmd}"
                    }
                }
            }               
        }
    }
}



